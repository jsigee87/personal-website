<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technicals on John Sigmon</title>
    <link>https://www.johnsigmon.me/technical/</link>
    <description>Recent content in Technicals on John Sigmon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.johnsigmon.me/technical/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linting Your Python Project</title>
      <link>https://www.johnsigmon.me/technical/python-linting/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.johnsigmon.me/technical/python-linting/</guid>
      <description>Linting vs Testing First I want to cover the difference between linting and testing so there is no confusion. Linting is a &amp;ldquo;static&amp;rdquo; test in the sense that it doesn&amp;rsquo;t run or execute any code. It analyzes the file(s) looking for code smells and what the linter considers poor style.
On the other hand, test actually execute the code and are looking to assert that functions have the correct output given some predefined input.</description>
    </item>
    
    <item>
      <title>JSON From The Command Line</title>
      <link>https://www.johnsigmon.me/technical/jq/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.johnsigmon.me/technical/jq/</guid>
      <description>I want to share a command line tool I have recently learned. jq provides a fantastic and fast way to manipulate and manage JSON files, especially when they become very large. I want to give a quick overview of how it works and then show some examples.
Giving jq input and output jq works as a filter, which means that it requires input and will give you output. The handiest way to work with it is via redirects.</description>
    </item>
    
    <item>
      <title>Bash Tips</title>
      <link>https://www.johnsigmon.me/technical/bash-tips/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.johnsigmon.me/technical/bash-tips/</guid>
      <description>Redirects All those fun redirect operators are outlined really well in this Stack Overflow post.
Grep, Awk, and Sed Grep is one of the most flexible and useful Linux utilities, Awk is actually a full blown programming language, and Sed isn&amp;rsquo;t too bad either. This 9 page overview gives some good tips to get started without being overly long and verbose.
Comparison Operators The cases of comparing strings versus comparing variables are handled a little differently in bash.</description>
    </item>
    
    <item>
      <title>Git Tips</title>
      <link>https://www.johnsigmon.me/technical/git-tips/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.johnsigmon.me/technical/git-tips/</guid>
      <description>Basic Git Usage A great reference for basic git usage, including push, pull, merge, and other operations is Travis Swicegood&amp;rsquo;s &amp;ldquo;Pragmatic Guide to Git&amp;rdquo;.
Julia Evans also has a wonderful and easy to understand introduction to solving common user errors within git in a comic format. You can find her work here.
The .gitignore Atlassian provides a great tutorial on .gitignore files here explaining what they are and how to use them.</description>
    </item>
    
  </channel>
</rss>